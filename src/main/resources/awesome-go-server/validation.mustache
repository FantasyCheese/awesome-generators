package {{packageName}}

import (
	"context"
	_ "embed"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/getkin/kin-openapi/openapi3filter"
	"github.com/getkin/kin-openapi/routers"
	"github.com/getkin/kin-openapi/routers/gorillamux"
	"net/http"
	"sync"
)

//go:embed spec.json
var specData []byte

var instance *routers.Router
var once sync.Once

func getKinRouter() *routers.Router {
	once.Do(func() {
		doc, _ := openapi3.NewLoader().LoadFromData(specData)
		_ = doc.Validate(context.Background())
		router, _ := gorillamux.NewRouter(doc)

        fileTypes := []string{"image/jpeg", "image/png", "video/mp4"}
        for _, fileType := range fileTypes {
            openapi3filter.RegisterBodyDecoder(fileType, openapi3filter.FileBodyDecoder)
        }

		instance = &router
	})
	return instance
}

func validateRequest(request *http.Request) (input *openapi3filter.RequestValidationInput, err error) {
	route, pathParams, _ := (*getKinRouter()).FindRoute(request)
	input = &openapi3filter.RequestValidationInput{
		Request:    request,
		PathParams: pathParams,
		Route:      route,
		Options:    &openapi3filter.Options{},
	}
	err = openapi3filter.ValidateRequest(context.Background(), input)
	return
}

type response struct {
	Status int
	Header http.Header
	Body   []byte
}

func respond(writer http.ResponseWriter, requestValidationInput *openapi3filter.RequestValidationInput, respond5XX func(error) []byte, resp *response) {
	responseValidationInput := &openapi3filter.ResponseValidationInput{
		RequestValidationInput: requestValidationInput,
		Status:                 resp.Status,
		Header:                 resp.Header,
	}
	responseValidationInput.SetBodyBytes(resp.Body)
	err := openapi3filter.ValidateResponse(context.Background(), responseValidationInput)
	if err != nil {
		respond(writer, requestValidationInput, respond5XX, &response{
			Status: http.StatusInternalServerError,
			Header: http.Header{"Content-Type": {"application/json"}},
			Body:   respond5XX(err),
		})
	}

	_, _ = writer.Write(resp.Body)
	for key, values := range resp.Header {
		for _, value := range values {
			writer.Header().Add(key, value)
		}
	}
	writer.WriteHeader(resp.Status)
}
